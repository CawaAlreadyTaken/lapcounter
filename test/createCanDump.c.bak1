#include <stdio.h>
#include <assert.h>
#include <stdint.h>
#include <unistd.h>

#include <linux/can.h>
#include <net/if.h>
#include <sys/ioctl.h>
#include <errno.h>


#include "../src/lapcounter.h"

typedef struct __is_packed {
    double latitude;
    double longitude;
} Primary_GPS_COORDS;

size_t serialize_Primary_GPS_COORDS(uint8_t* buffer, double latitude, double longitude) {
    Primary_GPS_COORDS primary_gps_coords = { latitude, longitude };
  // assert(buf_len >= sizeof(Primary_GPS_COORDS));
    memcpy(buffer, primary_gps_coords, sizeof(Primary_GPS_COORDS));
    return sizeof(Primary_GPS_COORDS);
}

int main(int argc, char **argv) {

    int bytes_read;     // to remove warning on fscanf
    int s;
    int nbytes;
    struct sockaddr_can addr;
    struct can_frame frame;
    struct ifreq ifr;

    const char *ifname = "vcan0";

    if ((s = socket(PF_CAN, SOCK_RAW, CAN_RAW)) == -1) {
            perror("Error while opening socket");
            return -1;
    }

    strcpy(ifr.ifr_name, ifname);
    ioctl(s, SIOCGIFINDEX, &ifr);

    addr.can_family  = AF_CAN;
    addr.can_ifindex = ifr.ifr_ifindex;

    printf("%s at index %d\n", ifname, ifr.ifr_ifindex);

    if (bind(s, (struct sockaddr *)&addr, sizeof(addr)) == -1) {
            perror("Error in socket bind");
            return -1;
    }


    FILE *file = fopen("mattiaCoords.txt", "r");
    int k = 1;
    while (k--) {
        double lat, lon;

        uint8_t* buffer_primary_gps_coords = (uint8_t*)malloc(sizeof(Primary_GPS_COORDS));
    
        Primary_GPS_COORDS primary_gps_coords_s = { 46.434254, 11.313696 };
        printf("%lf %lf\n", primary_gps_coords_s.latitude, primary_gps_coords_s.longitude);
        serialize_Primary_GPS_COORDS(buffer_primary_gps_coords, primary_gps_coords_s.latitude, primary_gps_coords_s.longitude);
        printf("\tSerialized\n\t%08X\n", *buffer_primary_gps_coords);

        //sprintf(frame.data, "%08X", buffer);
        //printf("%s\n", frame.data);
        //nbytes = write(s, &frame, sizeof(struct can_frame)); 
        
    }
}
