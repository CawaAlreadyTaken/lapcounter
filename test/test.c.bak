#include <stdio.h>
#include <assert.h>
#include <stdint.h>
#include <unistd.h>

#include <linux/can.h>
#include <net/if.h>
#include <sys/ioctl.h>
#include <errno.h>


#include "../src/lapcounter.h"

void main(int argc, char **argv) {

    double time_spent = 0.0;
    int bytes_read;     // to remove warning on fscanf
    double x, y;        // to read from file
    char mode;          // p: pixel, r: real

    // modified from here
    int s;
    int nbytes;
    struct sockaddr_can addr;
    struct can_frame frame;
    struct ifreq ifr;

    const char *ifname = "vcan0";

    if ((s = socket(PF_CAN, SOCK_RAW, CAN_RAW)) == -1) {
            perror("Error while opening socket");
            return;
    }

    strcpy(ifr.ifr_name, ifname);
    ioctl(s, SIOCGIFINDEX, &ifr);

    addr.can_family  = AF_CAN;
    addr.can_ifindex = ifr.ifr_ifindex;

    printf("%s at index %d\n", ifname, ifr.ifr_ifindex);

    if (bind(s, (struct sockaddr *)&addr, sizeof(addr)) == -1) {
            perror("Error in socket bind");
            return;
    }


    nbytes = write(s, &frame, sizeof(struct can_frame));  //write on canbus that lapcounter started
    if (nbytes == -1) {
        fprintf(stderr, "Tried to write on %s but failed. Is it on?\n", ifname);
        return;
    }

    //printf("Wrote %d bytes to canbus.\n", nbytes);
    // to here

    lc_point_t point;   // to pass to evaluation
    lc_counter_t * lp = lc_init(NULL);  // initialization with default settings

    assert(argc >= 3);  // assert if command has filename and mode
    FILE *file = fopen(argv[1], "r");
    mode = argv[2][0];  // modes should be r/p

    clock_t begin = clock();

    if (file != NULL) {
            while (!feof(file)) {
            bytes_read = fscanf(file, "%lf %lf\n", &x, &y);
            if (mode == 'p') {
                point.x = x / 1000000 + 46.4331; // transforms pixel...
                point.y = y / 1000000 + 11.3129; // ...to fake coordinates
            } else if (mode == 'r') {
                point.x = x;
                point.y = y;
            }
            if (lc_eval_point(lp, &point)) {// return 1 if new lap
                frame.can_id  = 0x123;  //change this
                frame.can_dlc = 5; // 1 for lap count, 4 for timestamp
                uint8_t lapCount = lp->laps_count;  //check if this overwrites data on frame
                frame.data[0] = lapCount;
                frame.data[1] = 0x12;
                frame.data[2] = 0x34;
                frame.data[3] = 0x56;
                frame.data[4] = 0x78;
                nbytes = write(s, &frame, sizeof(struct can_frame));  //write on canbus that lapcounter started
                printf("BIP! ");

            }
        }
        fclose(file);
        printf("\nLAP COUNT: %d\n", lp->laps_count);
    } else {
        perror("Error");
    }

    lc_reset(lp); // reset object (removes everything but thresholds)
    lc_destroy(lp);

    clock_t end = clock();
    time_spent += (double)(end - begin) / CLOCKS_PER_SEC;
    printf("The elapsed time is %f seconds\n", time_spent);
}
